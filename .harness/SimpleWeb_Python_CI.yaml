pipeline:
  name: SimpleWeb_Python_CI
  identifier: SimpleWeb_Python_CI
  projectIdentifier: DemoTx
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1702454216196
        repoName: simple-web-backend
        build: <+input>
  stages:
    - stage:
        name: Email
        identifier: Email
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  name: email
                  identifier: email
                  template:
                    templateRef: Email
                    versionLabel: v1.0
        tags: {}
    - stage:
        name: Build_and_artifact
        identifier: Build_and_artifact
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
            paths: []
          buildIntelligence:
            enabled: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: infraStatus
                  identifier: test_connection
                  spec:
                    shell: Sh
                    command: echo "pipeline started"
              - stepGroup:
                  name: SAST
                  identifier: SAST
                  steps:
                    - step:
                        type: Semgrep
                        name: Semgrep
                        identifier: Semgrep
                        spec:
                          mode: orchestration
                          config: default
                          target:
                            type: repository
                            workspace: .
                            detection: auto
                          advanced:
                            log:
                              level: info
                            fail_on_severity: critical
                          settings:
                            SEMGREP_APP_TOKEN: <+secrets.getValue("project.SEMGREP_APP_TOKEN")>
                          auth:
                            access_token: <+secrets.getValue("project.SEMGREP_APP_TOKEN")>
                        timeout: 10m
                    - step:
                        type: Bandit
                        name: Bandit
                        identifier: Bandit
                        spec:
                          mode: orchestration
                          config: default
                          target:
                            type: repository
                            workspace: .
                            detection: auto
                          advanced:
                            log:
                              level: info
                            fail_on_severity: critical
                      contextType: Pipeline
              - step:
                  type: Run
                  name: Update_Values
                  identifier: Update_Values
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash
                      echo "Updating Backend Secret PIN"
                      # File containing the code
                      FILE="app.py"

                      # PIN value from env or fallback default
                      PIN=<+pipeline.variables.pin>

                      # Escape special characters in PIN if necessary
                      ESCAPED_PIN=$(printf '%s\n' "$PIN" | sed -e 's/[]\/$*.^[]/\\&/g')

                      # Replace all hardcoded PINs (e.g., "2312") in the file with the env value
                      sed -i "s/data.get(\"pin\") != \".*\"/data.get(\"pin\") != \"$ESCAPED_PIN\"/g" "$FILE"

                      echo "✅ PIN updated in $FILE"
              - step:
                  type: Test
                  name: UnitTest
                  identifier: UnitTest
                  spec:
                    connectorRef: account.harnessImage
                    image: python:latest
                    shell: Sh
                    command: |-
                      pip install -r requirements.txt
                      coverage run -m pytest
                      coverage report --fail-under=80
                    intelligenceMode: true
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
              - step:
                  type: RunTests
                  name: RunTests_1
                  identifier: RunTests_1
                  spec:
                    language: Python
                    buildTool: Pytest
                    runOnlySelectedTests: true
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - report<+pipeline.sequenceId>.xml
                    enableTestSplitting: false
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
              - step:
                  type: OsvScanner
                  name: OsvScan_DependencySceck
                  identifier: OsvScan_DependencySceck
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      workspace: .
                      detection: auto
                    advanced:
                      log:
                        level: info
                      fail_on_severity: critical
              - step:
                  type: BuildAndPushDockerRegistry
                  name: BuildAndPushDockerRegistry
                  identifier: BuildAndPushDockerRegistry
                  spec:
                    connectorRef: Gurpreetdockerhub
                    repo: gurpreetghs/simple_python_be
                    tags:
                      - $<+pipeline.sequenceId>
                    caching: true
              - stepGroup:
                  name: SCA
                  identifier: SCA
                  steps:
                    - step:
                        type: AquaTrivy
                        name: AquaTrivy
                        identifier: AquaTrivy
                        spec:
                          mode: orchestration
                          config: default
                          target:
                            type: container
                            detection: auto
                          advanced:
                            log:
                              level: info
                            fail_on_severity: critical
                          privileged: true
                          image:
                            type: docker_v2
                            tag: <+pipeline.sequenceId>
                            name: gurpreetghs/simple_python_be
                            domain: hub.docker.com
                    - step:
                        type: Grype
                        name: Grype
                        identifier: Grype
                        spec:
                          mode: orchestration
                          config: default
                          target:
                            type: container
                            detection: auto
                          advanced:
                            log:
                              level: info
                            fail_on_severity: critical
                          privileged: true
                          image:
                            type: docker_v2
                            tag: <+pipeline.sequenceId>
                            name: gurpreetghs/simple_python_be
              - step:
                  type: Run
                  name: ReportsPublish
                  identifier: ReportsPublish
                  spec:
                    shell: Sh
                    command: echo "hello"
        delegateSelectors:
          - aws-delegate
    - stage:
        name: BuildWheel
        identifier: BuildWheel
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Docker
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: UpdatePIN
                  identifier: UpdatePIN
                  spec:
                    shell: Bash
                    command: |-
                      #!/bin/bash

                      # File containing the code
                      cd myapp
                      FILE="main.py"

                      # PIN value from env or fallback default
                      PIN=${ADMIN_PIN:-2312}

                      # Escape special characters in PIN if necessary
                      ESCAPED_PIN=$(printf '%s\n' "$PIN" | sed -e 's/[]\/$*.^[]/\\&/g')

                      # Replace all hardcoded PINs (e.g., "2312") in the file with the env value
                      sed -i "s/data.get(\"pin\") != \".*\"/data.get(\"pin\") != \"$ESCAPED_PIN\"/g" "$FILE"

                      echo "✅ PIN updated in $FILE"
              - step:
                  type: Run
                  name: buildWheel
                  identifier: buildWheel
                  spec:
                    connectorRef: account.harnessImage
                    image: python:latest
                    shell: Sh
                    command: |-
                      pip install build
                      python -m build
              - step:
                  type: Run
                  name: Zip_build
                  identifier: Zip_build
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash

                      # Exit if any command fails
                      set -e

                      # Define variables
                      DIST_DIR="dist"
                      OUTPUT_ZIP="artifact<+pipeline.sequenceId>.zip"

                      # Check if the dist directory exists
                      if [ ! -d "$DIST_DIR" ]; then
                        echo "Error: Directory '$DIST_DIR' does not exist."
                        exit 1
                      fi

                      # Remove existing artifact.zip if it exists
                      if [ -f "$OUTPUT_ZIP" ]; then
                        echo "Removing existing $OUTPUT_ZIP"
                        rm "$OUTPUT_ZIP"
                      fi

                      # Zip the contents of the dist directory
                      echo "Zipping contents of $DIST_DIR into $OUTPUT_ZIP"
                      zip -r "$OUTPUT_ZIP" "$DIST_DIR"

                      echo "Done: $OUTPUT_ZIP created."
              - step:
                  type: S3Upload
                  name: S3Upload
                  identifier: S3Upload
                  spec:
                    connectorRef: AWSW
                    region: us-east-1
                    bucket: python_build_be
                    sourcePath: artifact<+pipeline.sequenceId>.zip
  description: python CI flask Backend Build Pipeline
  variables:
    - name: pin
      type: String
      description: ""
      required: false
      value: "2312"
